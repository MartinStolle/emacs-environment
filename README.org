#+TITLE: My Literate Emacs Config
#+STARTUP: overview

* About
** Thanks
This configuration is pretty much taken from https://github.com/KaratasFurkan/.emacs.d and modified
to fit my needs.
** Installation
Clone this repository to ~/.emacs.d or ~/.config/emacs
#+BEGIN_SRC sh :tangle no
git clone https://github.com/MartinStolle/emacs-environment
#+END_SRC

Open Emacs and let the configuration install necessary packages.

Note: This configuration is *not* intended to be directly used by others, but it
can be useful to get inspired or copy some parts of it. I use Emacs 28.1.

** init.el
init.el is just used to load literate config.
#+BEGIN_SRC emacs-lisp :tangle init.el
(defconst config-org (locate-user-emacs-file "README.org"))
(defconst config-el (locate-user-emacs-file "config.el"))

(unless (file-exists-p config-el)
  (require 'org)
  (org-babel-tangle-file config-org config-el))

(load-file config-el)
#+END_SRC

** early-init.el
Note that a few of the code blocks (mostly UI related) in this configuration
tangle to =early-init.el= instead of =config.el= (which is the elisp file
generated by this configuration) to get the effects in the very beginning of the
initialization.

** Applying Changes
#+BEGIN_SRC emacs-lisp
(defun fk/tangle-config ()
  "Export code blocks from the literate config file
asynchronously."
  (interactive)
  ;; prevent emacs from killing until tangle-process finished
  (add-to-list 'kill-emacs-query-functions
               (lambda ()
                 (or (not (process-live-p (get-process "tangle-process")))
                     (y-or-n-p "\"fk/tangle-config\" is running; kill it? "))))
  ;; tangle config asynchronously
  (fk/async-process
   (format "emacs %s --batch --eval '(org-babel-tangle nil \"%s\")'" config-org config-el)
   "tangle-process"))
#+END_SRC

If the current org file is the literate config file, add a local hook to tangle
code blocks on every save to update configuration.
#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook
          (lambda ()
            (if (equal buffer-file-truename config-org)
                (fk/add-local-hook 'after-save-hook 'fk/tangle-config))))
#+END_SRC

* Package Management
** Straight
*** Installation & Initialization
Taken from: https://github.com/raxod502/straight.el#getting-started
#+BEGIN_SRC emacs-lisp
(defvar bootstrap-version)
(let ((bootstrap-file
       (locate-user-emacs-file "straight/repos/straight.el/bootstrap.el"))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
#+END_SRC

*** Settings
To not increase Emacs startup time, check package modifications when packages
edited (with Emacs) or manually invoke =straight-check-all= command, instead of
checking modifications at startup.

Note: this setting should be set *before* the initialization of *straight*.
early-init is a good place for this, so I used =:tangle early-init.el= here.
#+BEGIN_SRC emacs-lisp :tangle early-init.el
(setq straight-check-for-modifications '(check-on-save find-when-checking))
#+END_SRC

Straight uses symlinks in the =build= directory which causes
=xref-find-definition= to ask ="Symbolic link to Git-controlled source
file; follow link? (y or n)"= every time, to always answer =yes=, set
=vc-follow-symlinks= true.
#+BEGIN_SRC emacs-lisp
(setq vc-follow-symlinks t)
#+END_SRC

Use default depth of 1 when cloning files with git to get savings on network
bandwidth and disk space.
#+BEGIN_SRC emacs-lisp
(setq straight-vc-git-default-clone-depth 1)
#+END_SRC

*** Notes
- =M-x straight-pull-all=: update all packages.
- =M-x straight-normalize-all=: restore all packages (remove local edits)
- =M-x straight-freeze-versions= and =M-x straight-thaw-versions= are like =pip
  freeze requirements.txt= and =pip install -r requirements.txt=
- To tell straight.el that you want to use the version of Org shipped with
  Emacs, rather than cloning the upstream repository:
(Note: ":tangle no")
#+BEGIN_SRC emacs-lisp :tangle no
(use-package org
  :straight (:type built-in))
#+END_SRC

** Use-Package
*** Installation & Straight Integration
#+BEGIN_SRC emacs-lisp
;; Install `use-package'.
(straight-use-package 'use-package)

;; Install packages in `use-package' forms with `straight'. (not the built-in
;; package.el)
(setq straight-use-package-by-default t)
#+END_SRC

*** Notes
- Hooks in the =:hook= section, run in reverse order. Example:
(Note: ":tangle no")
#+BEGIN_SRC emacs-lisp :tangle no
(use-package package-name
  :hook
  (x-mode . last)
  (x-mode . second)
  (x-mode . first))
#+END_SRC

* Performance Optimization
A very nice source: https://github.com/hlissner/doom-emacs/blob/develop/docs/faq.org#how-does-doom-start-up-so-quickly
** Garbage Collection
Make startup faster by reducing the frequency of garbage collection.
Set gc-cons-threshold (the default is 800 kilobytes) to maximum value
available, to prevent any garbage collection from happening during
load time.

Note: tangle to early-init.el to make startup even faster
#+BEGIN_SRC emacs-lisp :tangle early-init.el
(setq gc-cons-threshold most-positive-fixnum)
#+END_SRC

Restore it to reasonable value after init. Also stop garbage collection during
minibuffer interaction (ivy etc.).
#+BEGIN_SRC emacs-lisp
(defconst 1mb 1048576)
(defconst 20mb 20971520)
(defconst 30mb 31457280)
(defconst 50mb 52428800)

(defun fk/defer-garbage-collection ()
  (setq gc-cons-threshold most-positive-fixnum))

(defun fk/restore-garbage-collection ()
  (run-at-time 1 nil (lambda () (setq gc-cons-threshold 30mb))))

(add-hook 'emacs-startup-hook 'fk/restore-garbage-collection 100)
(add-hook 'minibuffer-setup-hook 'fk/defer-garbage-collection)
(add-hook 'minibuffer-exit-hook 'fk/restore-garbage-collection)

(setq read-process-output-max 1mb)  ;; lsp-mode's performance suggest
#+END_SRC

** File Handler
(Note: ":tangle early-init.el")
#+BEGIN_SRC emacs-lisp :tangle early-init.el
(defvar default-file-name-handler-alist file-name-handler-alist)
(setq file-name-handler-alist nil)

(add-hook 'emacs-startup-hook
          (lambda ()
            (setq file-name-handler-alist default-file-name-handler-alist)) 100)
#+END_SRC

** Others
Copied from Doom Emacs:
(Note: ":tangle early-init.el")
#+BEGIN_SRC emacs-lisp :tangle early-init.el
;; In Emacs 27+, package initialization occurs before `user-init-file' is
;; loaded, but after `early-init-file'. straight.el handles package
;; initialization, so we must prevent Emacs from doing it early!
(setq package-enable-at-startup nil)
(advice-add 'package--ensure-init-file :override 'ignore)

;; Resizing the Emacs frame can be a terribly expensive part of changing the
;; font. By inhibiting this, we easily halve startup times with fonts that are
;; larger than the system default.
(setq frame-inhibit-implied-resize t)
(setq inhibit-startup-screen t)
#+END_SRC

** Custom Functions
*** measure-time
(Note: ":tangle early-init.el")
#+BEGIN_SRC emacs-lisp :tangle early-init.el
(defmacro fk/measure-time (&rest body)
  "Measure the time it takes to evaluate BODY."
  `(let ((time (current-time)))
     ,@body
     (message "%s" (float-time (time-since time)))))
#+END_SRC

*** time-since-startup
(Note: ":tangle early-init.el")
#+BEGIN_SRC emacs-lisp :tangle early-init.el
(defun fk/time-since-startup (&optional prefix)
  "Display the time that past since emacs startup. Add PREFIX if given at the
start of message for debug purposes."
  (interactive)
  (let* ((prefix (or prefix ""))
         (time (float-time (time-since before-init-time)))
         (str (format "%s%s seconds" prefix time)))
    (if (or (not (string-empty-p prefix))
            (called-interactively-p 'interactive))
        (message str)
      str)))
#+END_SRC

*** time-since-last-check
(Note: ":tangle early-init.el")
#+BEGIN_SRC emacs-lisp :tangle early-init.el
(defvar fk/time-last-check nil)
(defvar fk/time-threshold 0)
(setq fk/time-threshold 0.02)

(defun fk/time-since-last-check (&optional prefix)
  "Display the time that past since last check. Add PREFIX if given at the
start of message for debug purposes."
  (interactive)
  (let* ((prefix (or prefix ""))
         (time (float-time (time-since (or fk/time-last-check before-init-time))))
         (str (format "%s%s seconds" prefix time)))
    (setq fk/time-last-check (current-time))
    (if (or (not (string-empty-p prefix))
            (called-interactively-p 'interactive))
        (when (> time fk/time-threshold) (message "%s" str))
      str)))
#+END_SRC

* Better Defaults
** File Paths
Keep Emacs directory clean.
#+BEGIN_SRC emacs-lisp
(use-package no-littering
  :config
  (with-eval-after-load 'recentf
    (add-to-list 'recentf-exclude no-littering-var-directory)
    (add-to-list 'recentf-exclude no-littering-etc-directory))

  (setq auto-save-file-name-transforms  ; autosaved-file-name~
        `((".*" ,(no-littering-expand-var-file-name "auto-save/") t))
        custom-file (no-littering-expand-etc-file-name "custom.el"))

  (when (file-exists-p custom-file)
    ;; Load `custom-set-variables', not load whole `custom.el' with unwanted
    ;; `custom-set-faces'
    (with-current-buffer (find-file-noselect custom-file)
      (goto-char 0)
      (forward-sexp)
      (call-interactively 'eval-last-sexp)
      (kill-buffer)))

  (defconst fk/static-directory (locate-user-emacs-file "static/"))

  (defun fk/expand-static-file-name (file)
    "Expand filename FILE relative to `fk/static-directory'."
    (expand-file-name file fk/static-directory)))
#+END_SRC

** General
The uniquify library makes it so that when you visit two files with the same name in different directories,
the buffer names have the directory name appended to them.

#+BEGIN_SRC emacs-lisp
(setq-default
 ring-bell-function 'ignore            ; prevent beep sound.
 initial-major-mode 'fundamental-mode  ; TODO: maybe better on early-init or performance?
 initial-scratch-message nil           ; TODO: maybe better on early-init?
 create-lockfiles nil                  ; .#locked-file-name
 confirm-kill-processes nil            ; exit emacs without asking to kill processes
 backup-by-copying t                   ; prevent linked files
 require-final-newline t               ; always end files with newline
 delete-old-versions t                 ; don't ask to delete old backup files
 revert-without-query '(".*")          ; `revert-buffer' without confirmation
 uniquify-buffer-name-style 'forward   ; non-unique buffer name display: unique-part/non-unique-filename
 fast-but-imprecise-scrolling t        ; supposed to make scrolling faster on hold
 window-resize-pixelwise t)            ; correctly resize windows by pixels (e.g. in split-window functions)

(defalias 'yes-or-no-p 'y-or-n-p)
;; Auto revert after you changed the file in Emacs
(global-auto-revert-mode)
; Purpose: When you visit a file, point goes to the last place where it was when you previously visited the same file.
(save-place-mode)
; When so-long detects such a file, it calls the command `so-long', which
; overrides certain minor modes and variables (you can configure the details)
; to improve performance in the buffer.
(global-so-long-mode)
; he repeat command will repeat the last action
(bind-key* "M-r" 'repeat)

(defun fk/add-local-hook (hook function)
  "Add buffer-local hook."
  (add-hook hook function :local t))

(defun fk/async-process (command &optional name filter)
  "Start an async process by running the COMMAND string with bash. Return the
process object for it.

NAME is name for the process. Default is \"async-process\".

FILTER is function that runs after the process is finished, its args should be
\"(process output)\". Default is just messages the output."
  (make-process
   :command `("bash" "-c" ,command)
   :name (if name name
           "async-process")
   :filter (if filter filter
             (lambda (process output) (message (s-trim output))))))

;; Examples:
;;
;; (fk/async-process "ls")
;;
;; (fk/async-process "ls" "my ls process"
;;                   (lambda (process output) (message "Output:\n\n%s" output)))
;;
;; (fk/async-process "unknown command")

;; Make sure to focus when a new emacsclient frame created.
(add-hook 'server-after-make-frame-hook (lambda () (select-frame-set-input-focus (selected-frame))))

(defalias 'narrow-quit 'widen)  ; I forget `widen' everytime

(defmacro fk/advice-add (symbol where function &rest args)
  "Add advice even the arguments are not the same."
  `(advice-add ,symbol ,where (lambda (&rest _) (interactive) (apply ,function '(,@args)))))
#+END_SRC

** Helpful
A better, more detailed *help* buffer.
#+BEGIN_SRC emacs-lisp
(use-package helpful
  :bind
  (([remap describe-function] . helpful-callable)
   ([remap describe-variable] . helpful-variable)
   ([remap describe-key] . helpful-key)
   :map emacs-lisp-mode-map
   ("C-c C-d" . helpful-at-point)))
#+END_SRC

** Local Variables
#+BEGIN_SRC emacs-lisp
(defun fk/straight-ignore-local-variables (orig-func &rest args)
  "Ignore local variables when visiting an installed package
which is generally not intended to be edited."
  (unless (string-prefix-p (straight--dir) default-directory)
    (apply orig-func args)))

(advice-add 'hack-local-variables-confirm :around 'fk/straight-ignore-local-variables)
#+END_SRC

** Keybindings
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+END_SRC
* Appearance
** Better Defaults
#+BEGIN_SRC emacs-lisp
(global-hl-line-mode)
(blink-cursor-mode -1)

(setq-default
 truncate-lines t
 frame-resize-pixelwise t     ; maximized emacs may not fit screen without this
 frame-title-format '((:eval  ; TODO: maybe better in "* Better Defaults"
                       (let ((project-name (projectile-project-name)))
                         (unless (string= "-" project-name)
                           (format "%s| " project-name))))
                      "%b"))  ; project-name| file-name
#+END_SRC

** Custom Functions
*** disable-all-themes
#+BEGIN_SRC emacs-lisp
(defun fk/disable-all-themes ()
  "Disable all active themes."
  (interactive)
  (dolist (theme custom-enabled-themes)
    (disable-theme theme)))
#+END_SRC
*** toggle-ui-elements
#+BEGIN_SRC emacs-lisp
(defun fk/toggle-ui-elements (&optional arg)
  "Toggle `display-line-numbers-mode', `highlight-indent-guides-mode' and
`display-fill-column-indicator-mode'."
  (interactive)
  (display-line-numbers-mode (or arg (if display-line-numbers-mode -1 1)))
  (highlight-indent-guides-mode (or arg (if highlight-indent-guides-mode -1 1)))
  (display-fill-column-indicator-mode (or arg (if display-fill-column-indicator-mode -1 1))))

;; (add-hook 'prog-mode-hook (lambda () (fk/toggle-ui-elements -1)) 100)
#+END_SRC

** Remove Redundant UI
(Note: ":tangle early-init.el")
#+BEGIN_SRC emacs-lisp :tangle early-init.el
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
;; Do not show default modeline until doom-modeline is loaded
(setq-default mode-line-format nil)
#+END_SRC

** Window Dividers
Change default window dividers to a better built-in alternative.
(Note: ":tangle early-init.el")
#+BEGIN_SRC emacs-lisp :tangle early-init.el
(setq window-divider-default-places t
      window-divider-default-bottom-width 1
      window-divider-default-right-width 1)

(window-divider-mode)
#+END_SRC

** Font
#+BEGIN_SRC emacs-lisp :tangle early-init.el
(defconst fk/default-font-family "Consolas")
(defconst fk/default-font-size 90)
(defconst fk/default-icon-size 15)

(defconst fk/variable-pitch-font-family "Noto Serif")
(defconst fk/variable-pitch-font-size fk/default-font-size)  ; TODO: adjust this and use in org-mode

(custom-set-faces
 `(default ((t (:family ,fk/default-font-family :height ,fk/default-font-size))))
 `(variable-pitch ((t (:family ,fk/variable-pitch-font-family :height ,fk/variable-pitch-font-size))))
 ;; Characters with fixed pitch face do not shown when height is 90.
 `(fixed-pitch-serif ((t (:height 100)))))
#+END_SRC

** Theme
*** Theme
https://github.com/doomemacs/themes
#+BEGIN_SRC emacs-lisp
(use-package doom-themes
  :config
  (load-theme 'doom-nord  t))
#+END_SRC

*** Settings
**** Disable all themes before loading a theme
#+BEGIN_SRC emacs-lisp
(defadvice load-theme (before disable-themes-first activate)
  (fk/disable-all-themes))
#+END_SRC

**** load-theme without annoying confirmation
#+BEGIN_SRC emacs-lisp
(advice-add 'load-theme
            :around
            (lambda (fn theme &optional no-confirm no-enable)
              (funcall fn theme t)))
#+END_SRC

*** Alternatives
**** A light emacs theme that's well suited for org-mode
#+BEGIN_SRC emacs-lisp
(use-package poet-theme
  :defer t)
#+END_SRC

** Mode Line
*** Doom Modeline
A fancy and fast mode-line inspired by minimalism design.
https://seagle0128.github.io/doom-modeline/
#+BEGIN_SRC emacs-lisp
(use-package doom-modeline
  :init
  ;; show doom-modeline at the same time with dashboard
  (add-hook 'emacs-startup-hook 'doom-modeline-mode -100)
  :custom
  (doom-modeline-buffer-encoding nil)
  (doom-modeline-vcs-max-length 40)
  (doom-modeline-bar-width 1)
  (doom-modeline-env-python-executable "python")
  :custom-face
  (doom-modeline-buffer-path ((t (:inherit font-lock-comment-face :slant normal))))
  :hook
  (dashboard-after-initialize . column-number-mode))
#+END_SRC

*** Anzu
anzu.el provides a minor mode which displays current match and total matches information in the mode-line in various search modes.
https://github.com/emacsorphanage/anzu
#+BEGIN_SRC emacs-lisp
(use-package anzu
  :hook
  (dashboard-after-initialize . global-anzu-mode))
#+END_SRC
** Beacon
Never lose your cursor again
https://github.com/Malabarba/beacon

#+BEGIN_SRC emacs-lisp
(use-package beacon
  ;; :preface
  ;; (defconst cursor-color+1 (format "#%x" (+ 1 (string-to-number (string-remove-prefix "#" (face-attribute 'cursor :background)) 16))))
  :custom
  (beacon-color "#D08771")  ; TODO: cursor-color+1 does not work with emacs --daemon
  ;; (beacon-blink-when-point-moves-vertically 10)
  (beacon-dont-blink-major-modes '(dashboard-mode minibuff))
  :config
  (defun fk/beacon-blink ()
    "`beacon-blink' with `beacon-dont-blink-major-modes' control."
    (interactive)
    (unless (seq-find 'derived-mode-p beacon-dont-blink-major-modes)
      (beacon-blink)))
  ;; `beacon-blink' manually instead of activating `beacon-mode' to not
  ;; calculate every time on post-command-hook if should beacon blink
  ;; TODO: create a global minor mode with this: `fk/manual-beacon-mode'
  (dolist (command '(other-window
                     winum-select-window-by-number
                     scroll-up-command
                     scroll-down-command
                     recenter-top-bottom
                     ;; fk/smooth-scroll-up
                     ;; fk/smooth-scroll-down
                     ;; fk/smooth-recenter-top-bottom
                     move-to-window-line-top-bottom
                     ace-select-window
                     ace-swap-window
                     aw-flip-window
                     avy-goto-word-or-subword-1
                     avy-pop-mark))
    (eval `(defadvice ,command (after blink activate)
             (fk/beacon-blink))))
  (dolist (hook '(find-file-hook
                  xref-after-jump-hook
                  xref-after-return-hook
                  persp-switch-hook))
    (add-hook hook 'fk/beacon-blink)))
#+END_SRC

** All The Icons
Fonts with nice icons
https://github.com/domtronn/all-the-icons.el
#+BEGIN_SRC emacs-lisp
;; Prerequisite for a few packages (e.g. treemacs, all-the-icons-dired)
;; "M-x all-the-icons-install-fonts" to install fonts at the first time.
(use-package all-the-icons)
#+END_SRC

** Emacs Dashboard
https://github.com/emacs-dashboard/emacs-dashboard
#+BEGIN_SRC emacs-lisp
(use-package dashboard
  :custom
  (dashboard-startup-banner (fk/expand-static-file-name "GnuHead.png"))
  ;; Do not show package count, it is meaningless because of lazy loading.
  (dashboard-banner-logo-title "Welcome to Emacs!\n")
  (dashboard-init-info (format "Emacs started in %s\n\n" (fk/time-since-startup)))
  (dashboard-set-heading-icons t)
  (dashboard-set-file-icons t)
  (dashboard-center-content t)
  (dashboard-item-shortcuts '((recents . "r")
                              (bookmarks . "b")
                              (projects . "p")
                              (agenda . "a")))
  (dashboard-items '((recents  . 5)
                     (bookmarks . 5)
                     (projects . 5)
                     (agenda . 0)))  ; I override the insert-agenda function
  :custom-face
  (dashboard-heading ((t (:inherit font-lock-keyword-face :height 1.2))))
  (dashboard-items-face ((t (:weight normal))))
  :hook
  (dashboard-mode . (lambda () (setq-local cursor-type nil)))
  :config
  (dashboard-setup-startup-hook)

  ;; Run the hooks even if dashboard initialization is skipped
  (when (> (length command-line-args) 1)
    (add-hook 'emacs-startup-hook (lambda () (run-hooks 'dashboard-after-initialize-hook))))

  (defun fk/home ()
    "Switch to home (dashboard) buffer."
    (interactive)
    (if (get-buffer dashboard-buffer-name)
        (switch-to-buffer dashboard-buffer-name)
      (dashboard-refresh-buffer))))
#+END_SRC

** Fill Column Indicator
#+BEGIN_SRC emacs-lisp
(use-package display-fill-column-indicator
  :straight (:type built-in)
  :custom
  (display-fill-column-indicator-character ?│)
  :hook
  (prog-mode . display-fill-column-indicator-mode))
#+END_SRC

** Hide/Show
#+BEGIN_SRC emacs-lisp
(use-package hideshow
  :straight (:type built-in)
  :defer nil
  :custom
  (hs-isearch-open t)
  :bind
  ( :map hs-minor-mode-map
    ("TAB" . fk/hs-smart-tab)
    ("<tab>" . fk/hs-smart-tab)
    ("<backtab>" . hs-toggle-hiding))
  :config
  (defun fk/hs-smart-tab ()
    "Pretend like `hs-toggle-hiding' if point is on a hiding block."
    (interactive)
    (if (save-excursion
          (move-beginning-of-line 1)
          (hs-looking-at-block-start-p))
        (hs-show-block)
      (indent-for-tab-command)))

  (defun fk/hide-second-level-blocks ()
    "Hide second level blocks (mostly class methods in python) in
current buffer."
    (interactive)
    (hs-minor-mode)
    (save-excursion
      (goto-char (point-min))
      (hs-hide-level 2))))
#+END_SRC

* Completion
** Which Key (Keybinding Completion)
If error Appearance about 'Local variables entry is missing the suffix'
remove the end line symbols from ~/.emacs.d/straight/build/which-key-posframe/which-key-posframe.el
#+BEGIN_SRC emacs-lisp
(use-package which-key-posframe
  :custom
  (which-key-idle-delay 2)
  (which-key-idle-secondary-delay 0)
  :hook
  (dashboard-after-initialize . which-key-posframe-mode)
  (dashboard-after-initialize . which-key-mode))
#+END_SRC

** Ivy/Counsel
https://github.com/abo-abo/swiper

Taken from https://github.com/seagle0128/.emacs.d/blob/master/lisp/init-ivy.el

#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :diminish ivy-mode counsel-mode
    :bind (("C-s"   . swiper-isearch)
           ("C-r"   . swiper-isearch-backward)
           ("s-f"   . swiper)
           ("C-S-s" . swiper-all)

           ("C-c C-r" . ivy-resume)
           ("C-c v p" . ivy-push-view)
           ("C-c v o" . ivy-pop-view)
           ("C-c v ." . ivy-switch-view)

           :map counsel-mode-map
           ([remap swiper] . counsel-grep-or-swiper)
           ([remap swiper-backward] . counsel-grep-or-swiper-backward)
           ([remap dired] . counsel-dired)
           ([remap set-variable] . counsel-set-variable)
           ([remap insert-char] . counsel-unicode-char)
           ([remap recentf-open-files] . counsel-recentf)
           ([remap org-capture] . counsel-org-capture)

           ("C-x j"   . counsel-mark-ring)
           ("C-h F"   . counsel-faces)

           ("C-c B" . counsel-bookmarked-directory)
           ("C-c L" . counsel-load-library)
           ("C-c O" . counsel-find-file-extern)
           ("C-c P" . counsel-package)
           ("C-c R" . counsel-list-processes)
           ("C-c f" . counsel-find-library)
           ("C-c g" . counsel-grep)
           ("C-c h" . counsel-command-history)
           ("C-c i" . counsel-git)
           ("C-c j" . counsel-git-grep)
           ("C-c l" . counsel-git-log)
           ("C-c o" . counsel-outline)
           ("C-c r" . counsel-rg)
           ("C-c z" . counsel-fzf)

           ("C-c c B" . counsel-bookmarked-directory)
           ("C-c c F" . counsel-faces)
           ("C-c c L" . counsel-load-library)
           ("C-c c K" . counsel-ace-link)
           ("C-c c O" . counsel-find-file-extern)
           ("C-c c P" . counsel-package)
           ("C-c c R" . counsel-list-processes)
           ("C-c c a" . counsel-apropos)
           ("C-c c e" . counsel-colors-emacs)
           ("C-c c f" . counsel-find-library)
           ("C-c c g" . counsel-grep)
           ("C-c c h" . counsel-command-history)
           ("C-c c i" . counsel-git)
           ("C-c c j" . counsel-git-grep)
           ("C-c c l" . counsel-git-log)
           ("C-c c m" . counsel-minibuffer-history)
           ("C-c c o" . counsel-outline)
           ("C-c c p" . counsel-pt)
           ("C-c c r" . counsel-rg)
           ("C-c c s" . counsel-ag)
           ("C-c c t" . counsel-load-theme)
           ("C-c c u" . counsel-unicode-char)
           ("C-c c w" . counsel-colors-web)
           ("C-c c v" . counsel-set-variable)
           ("C-c c z" . counsel-fzf)

           :map ivy-minibuffer-map
           ("C-w" . ivy-yank-word)

           :map counsel-find-file-map
           ("C-h" . counsel-up-directory)

           :map swiper-map
           ("M-s" . swiper-isearch-toggle)
           ("M-%" . swiper-query-replace)

           :map isearch-mode-map
           ("M-s" . swiper-isearch-toggle))
    :hook ((after-init . ivy-mode)
           (ivy-mode . counsel-mode))
    :init
    (setq enable-recursive-minibuffers t) ; Allow commands in minibuffers

    (setq ivy-height 12
          ivy-use-selectable-prompt t
          ivy-use-virtual-buffers t    ; Enable bookmarks and recentf
          ivy-fixed-height-minibuffer t
          ivy-count-format "(%d/%d) "
          ivy-ignore-buffers '("\\` " "\\`\\*tramp/" "\\`\\*xref" "\\`\\*helpful "
                               "\\`\\*.+-posframe-buffer\\*")
          ivy-on-del-error-function #'ignore
          ivy-initial-inputs-alist nil)

    ;; Better performance on Windows
    (if (eq system-type 'windows-nt)
      (setq ivy-dynamic-exhibit-delay-ms 200))

    (setq swiper-action-recenter t)

    (setq counsel-find-file-at-point t
          counsel-preselect-current-file t
          counsel-yank-pop-separator "\n────────\n")
    (add-hook 'counsel-grep-post-action-hook #'recenter)

    ;; Use the faster search tools
    (when (executable-find "rg")
      (setq counsel-grep-base-command "rg -S --no-heading --line-number --color never '%s' '%s'"))
    (when (executable-find "fd")
      (setq counsel-fzf-cmd
            "fd --type f --hidden --follow --exclude .git --color never '%s'"))

    :config
    (with-no-warnings
      ;; persist views
      (with-eval-after-load 'savehist
        (add-to-list 'savehist-additional-variables 'ivy-views))

      ;; Highlight the selected item
      (defun my-ivy-format-function (cands)
        "Transform CANDS into a string for minibuffer."
        (if (display-graphic-p)
            (ivy-format-function-line cands)
          (ivy-format-function-arrow cands)))
      (setf (alist-get 't ivy-format-functions-alist) #'my-ivy-format-function)

      ;; Pre-fill search keywords
      ;; @see https://www.reddit.com/r/emacs/comments/b7g1px/withemacs_execute_commands_like_marty_mcfly/
      (defvar my-ivy-fly-commands
        '(query-replace-regexp
          flush-lines keep-lines ivy-read
          swiper swiper-backward swiper-all
          swiper-isearch swiper-isearch-backward
          lsp-ivy-workspace-symbol lsp-ivy-global-workspace-symbol
          counsel-grep-or-swiper counsel-grep-or-swiper-backward
          counsel-grep counsel-ack counsel-ag counsel-rg counsel-pt))

      (defvar my-ivy-fly-back-commands
        '(self-insert-command
          ivy-forward-char ivy-delete-char delete-forward-char kill-word kill-sexp
          end-of-line mwim-end-of-line mwim-end-of-code-or-line mwim-end-of-line-or-code
          yank ivy-yank-word ivy-yank-char ivy-yank-symbol counsel-yank-pop))

      (defvar-local my-ivy-fly--travel nil)
      (defun my-ivy-fly-back-to-present ()
        (cond ((and (memq last-command my-ivy-fly-commands)
                    (equal (this-command-keys-vector) (kbd "M-p")))
               ;; repeat one time to get straight to the first history item
               (setq unread-command-events
                     (append unread-command-events
                             (listify-key-sequence (kbd "M-p")))))
              ((or (memq this-command my-ivy-fly-back-commands)
                   (equal (this-command-keys-vector) (kbd "M-n")))
               (unless my-ivy-fly--travel
                 (delete-region (point) (point-max))
                 (when (memq this-command '(ivy-forward-char
                                            ivy-delete-char delete-forward-char
                                            kill-word kill-sexp
                                            end-of-line mwim-end-of-line
                                            mwim-end-of-code-or-line
                                            mwim-end-of-line-or-code))
                   (insert (ivy-cleanup-string ivy-text))
                   (when (memq this-command '(ivy-delete-char
                                              delete-forward-char
                                              kill-word kill-sexp))
                     (beginning-of-line)))))))

      (defun my-ivy-fly-time-travel ()
        (when (memq this-command my-ivy-fly-commands)
          (insert (propertize
                   (save-excursion
                     (set-buffer (window-buffer (minibuffer-selected-window)))
                     (ivy-thing-at-point))
                   'face 'shadow))
          (add-hook 'pre-command-hook 'my-ivy-fly-back-to-present nil t)
          (beginning-of-line)))

      (add-hook 'minibuffer-setup-hook #'my-ivy-fly-time-travel)
      (add-hook 'minibuffer-exit-hook
                (lambda ()
                  (remove-hook 'pre-command-hook 'my-ivy-fly-back-to-present t)))

      ;;
      ;; Improve search experience of `swiper' and `counsel'
      ;;
      (defun my-ivy-switch-to-swiper (&rest _)
        "Switch to `swiper' with the current input."
        (swiper ivy-text))

      (defun my-ivy-switch-to-swiper-isearch (&rest _)
        "Switch to `swiper-isearch' with the current input."
        (swiper-isearch ivy-text))

      (defun my-ivy-switch-to-swiper-all (&rest _)
        "Switch to `swiper-all' with the current input."
        (swiper-all ivy-text))

      (defun my-ivy-switch-to-rg-dwim (&rest _)
        "Switch to `rg-dwim' with the current input."
        (ivy-quit-and-run
          (rg-dwim default-directory)))

      (defun my-ivy-switch-to-counsel-rg (&rest _)
        "Switch to `counsel-rg' with the current input."
        (counsel-rg ivy-text default-directory))

      (defun my-ivy-switch-to-counsel-git-grep (&rest _)
        "Switch to `counsel-git-grep' with the current input."
        (counsel-git-grep ivy-text default-directory))

      (defun my-ivy-switch-to-counsel-find-file (&rest _)
        "Switch to `counsel-find-file' with the current input."
        (counsel-find-file ivy-text))

      (defun my-ivy-switch-to-counsel-fzf (&rest _)
        "Switch to `counsel-fzf' with the current input."
        (counsel-fzf ivy-text default-directory))

      (defun my-ivy-switch-to-counsel-git (&rest _)
        "Switch to `counsel-git' with the current input."
        (counsel-git ivy-text))

      (defun my-ivy-copy-library-path (lib)
        "Copy the full path of LIB."
        (let ((path (find-library-name lib)))
          (kill-new path)
          (message "Copied path: \"%s\"." path)))

      ;; @see https://emacs-china.org/t/swiper-swiper-isearch/9007/12
      (defun my-swiper-toggle-counsel-rg ()
        "Toggle `counsel-rg' and `swiper'/`swiper-isearch' with the current input."
        (interactive)
        (ivy-quit-and-run
          (if (memq (ivy-state-caller ivy-last) '(swiper swiper-isearch))
              (my-ivy-switch-to-counsel-rg)
            (my-ivy-switch-to-swiper-isearch))))
      (bind-key "<C-return>" #'my-swiper-toggle-counsel-rg swiper-map)
      (bind-key "<C-return>" #'my-swiper-toggle-counsel-rg counsel-ag-map)

      (with-eval-after-load 'rg
        (defun my-swiper-toggle-rg-dwim ()
          "Toggle `rg-dwim' with the current input."
          (interactive)
          (ivy-quit-and-run
            (rg-dwim default-directory)))
        (bind-key "<M-return>" #'my-swiper-toggle-rg-dwim swiper-map)
        (bind-key "<M-return>" #'my-swiper-toggle-rg-dwim counsel-ag-map))

      (defun my-swiper-toggle-swiper-isearch ()
        "Toggle `swiper' and `swiper-isearch' with the current input."
        (interactive)
        (ivy-quit-and-run
          (if (eq (ivy-state-caller ivy-last) 'swiper-isearch)
              (swiper ivy-text)
            (swiper-isearch ivy-text))))
      (bind-key "<s-return>" #'my-swiper-toggle-swiper-isearch swiper-map)

      (defun my-counsel-find-file-toggle-fzf ()
        "Toggle `counsel-fzf' with the current `counsel-find-file' input."
        (interactive)
        (ivy-quit-and-run
          (counsel-fzf (or ivy-text "") default-directory)))
      (bind-key "<C-return>" #'my-counsel-find-file-toggle-fzf counsel-find-file-map)

      ;; More actions
      (ivy-add-actions
       #'swiper-isearch
       '(("r" my-ivy-switch-to-counsel-rg "rg")
         ("d" my-ivy-switch-to-rg-dwim "rg dwim")
         ("s" my-ivy-switch-to-swiper "swiper")
         ("a" my-ivy-switch-to-swiper-all "swiper all")))

      (ivy-add-actions
       #'swiper
       '(("r" my-ivy-switch-to-counsel-rg "rg")
         ("d" my-ivy-switch-to-rg-dwim "rg dwim")
         ("s" my-ivy-switch-to-swiper-isearch "swiper isearch")
         ("a" my-ivy-switch-to-swiper-all "swiper all")))

      (ivy-add-actions
       #'swiper-all
       '(("g" my-ivy-switch-to-counsel-git-grep "git grep")
         ("r" my-ivy-switch-to-counsel-rg "rg")
         ("d" my-ivy-switch-to-rg-dwim "rg dwim")
         ("s" my-swiper-toggle-swiper-isearch "swiper isearch")
         ("S" my-ivy-switch-to-swiper "swiper")))

      (ivy-add-actions
       #'counsel-rg
       '(("s" my-ivy-switch-to-swiper-isearch "swiper isearch")
         ("S" my-ivy-switch-to-swiper "swiper")
         ("a" my-ivy-switch-to-swiper-all "swiper all")
         ("d" my-ivy-switch-to-rg-dwim "rg dwim")))

      (ivy-add-actions
       #'counsel-git-grep
       '(("s" my-ivy-switch-to-swiper-isearch "swiper isearch")
         ("S" my-ivy-switch-to-swiper "swiper")
         ("r" my-ivy-switch-to-rg-dwim "rg")
         ("d" my-ivy-switch-to-rg-dwim "rg dwim")
         ("a" my-ivy-switch-to-swiper-all "swiper all")))

      (ivy-add-actions
       #'counsel-find-file
       '(("g" my-ivy-switch-to-counsel-git "git")
         ("z" my-ivy-switch-to-counsel-fzf "fzf")))

      (ivy-add-actions
       #'counsel-git
       '(("f" my-ivy-switch-to-counsel-find-file "find file")
         ("z" my-ivy-switch-to-counsel-fzf "fzf")))

      (ivy-add-actions
       'counsel-fzf
       '(("f" my-ivy-switch-to-counsel-find-file "find file")
         ("g" my-ivy-switch-to-counsel-git "git")))

      (ivy-add-actions
       'counsel-find-library
       '(("p" my-ivy-copy-library-path "copy path")))

      (ivy-add-actions
       'counsel-load-library
       '(("p" my-ivy-copy-library-path "copy path"))))

    ;; Enhance M-x
    (use-package amx
      :init (setq amx-history-length 20))

    ;; Better sorting and filtering
    (use-package prescient
      :commands prescient-persist-mode
      :init (prescient-persist-mode 1))

    (use-package ivy-prescient
      :commands ivy-prescient-re-builder
      :custom-face
      (ivy-minibuffer-match-face-1 ((t (:foreground ,(face-foreground 'font-lock-doc-face nil t)))))
      :init
      (defun ivy-prescient-non-fuzzy (str)
        "Generate an Ivy-formatted non-fuzzy regexp list for the given STR.
  This is for use in `ivy-re-builders-alist'."
        (let ((prescient-filter-method '(literal regexp)))
          (ivy-prescient-re-builder str)))

      (setq ivy-prescient-retain-classic-highlighting t
            ivy-re-builders-alist
            '((counsel-ag . ivy-prescient-non-fuzzy)
              (counsel-rg . ivy-prescient-non-fuzzy)
              (counsel-pt . ivy-prescient-non-fuzzy)
              (counsel-grep . ivy-prescient-non-fuzzy)
              (counsel-fzf . ivy-prescient-non-fuzzy)
              (counsel-imenu . ivy-prescient-non-fuzzy)
              (counsel-yank-pop . ivy-prescient-non-fuzzy)
              (swiper . ivy-prescient-non-fuzzy)
              (swiper-isearch . ivy-prescient-non-fuzzy)
              (swiper-all . ivy-prescient-non-fuzzy)
              (lsp-ivy-workspace-symbol . ivy-prescient-non-fuzzy)
              (lsp-ivy-global-workspace-symbol . ivy-prescient-non-fuzzy)
              (insert-char . ivy-prescient-non-fuzzy)
              (counsel-unicode-char . ivy-prescient-non-fuzzy)
              (t . ivy-prescient-re-builder))
            ivy-prescient-sort-commands
            '(counsel-M-x execute-extended-command execute-extended-command-for-buffer))

      (ivy-prescient-mode 1))

    ;; Additional key bindings for Ivy
    (use-package ivy-hydra
      :init
      (setq ivy-read-action-function 'ivy-hydra-read-action))

    ;; Ivy integration for Projectile
    (use-package counsel-projectile
      :hook (counsel-mode . counsel-projectile-mode)
      :init (setq counsel-projectile-grep-initial-input '(ivy-thing-at-point)))
   )
#+END_SRC
** Company (Code & Text Completion)
http://company-mode.github.io/
#+BEGIN_SRC emacs-lisp
(use-package company
  :custom
  (company-idle-delay 0)
  (company-minimum-prefix-length 1)
  (company-tooltip-align-annotations t)
  (company-dabbrev-downcase nil)
  (company-dabbrev-other-buffers t) ; search buffers with the same major mode
  :bind
  ( :map company-active-map
    ("RET" . nil)
    ([return] . nil)
    ("C-w" . nil)
    ("TAB" . company-complete-selection)
    ("<tab>" . company-complete-selection)
    ("C-s" . company-complete-selection)  ; Mostly to use during yasnippet expansion
    ("C-n" . company-select-next)
    ("C-p" . company-select-previous))
  :hook
  (dashboard-after-initialize . global-company-mode)
  :config
  (add-to-list 'company-begin-commands 'backward-delete-char-untabify)

  ;; Show YASnippet snippets in company

  (defun fk/company-backend-with-yas (backend)
    "Add ':with company-yasnippet' to the given company backend."
    (if (and (listp backend) (member 'company-yasnippet backend))
        backend
      (append (if (consp backend)
                  backend
                (list backend))
              '(:with company-yasnippet))))

  (defun fk/company-smart-snippets (fn command &optional arg &rest _)
    "Do not show yasnippet candidates after dot."
    ;;Source:
    ;;https://www.reddit.com/r/emacs/comments/7dnbxl/how_to_temporally_filter_companymode_candidates/
    (unless (when (and (equal command 'prefix) (> (point) 0))
              (let* ((prefix (company-grab-symbol))
                     (point-before-prefix (if (> (- (point) (length prefix) 1) 0)
                                              (- (point) (length prefix) 1)
                                            1))
                     (char (buffer-substring-no-properties point-before-prefix (1+ point-before-prefix))))
                (string= char ".")))
      (funcall fn command arg)))

  ;; TODO: maybe show snippets at first?
  (defun fk/company-enable-snippets ()
    "Enable snippet suggestions in company by adding ':with
company-yasnippet' to all company backends."
    (interactive)
    (setq company-backends (mapcar 'fk/company-backend-with-yas company-backends))
    (advice-add 'company-yasnippet :around 'fk/company-smart-snippets))

  (fk/company-enable-snippets))
#+END_SRC

** YASnippet (Snippet Completion)
https://github.com/joaotavora/yasnippet
#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  ;; Expand snippets with `C-j', not with `TAB'. Use `TAB' to always
  ;; jump to next field, even when company window is active. If there
  ;; is need to complete company's selection, use `C-s'
  ;; (`company-complete-selection').
  :custom
  (yas-indent-line nil)
  (yas-inhibit-overlay-modification-protection t)
  :custom-face
  (yas-field-highlight-face ((t (:inherit region))))
  :bind*
  (("C-j" . yas-expand)
   :map yas-minor-mode-map
   ("TAB" . nil)
   ("<tab>" . nil)
   :map yas-keymap
   ("TAB" . (lambda () (interactive) (company-abort) (yas-next-field)))
   ("<tab>" . (lambda () (interactive) (company-abort) (yas-next-field))))
  :hook
  (dashboard-after-initialize . yas-global-mode)
  (snippet-mode . (lambda () (setq-local require-final-newline nil))))
#+END_SRC

** Hydra
https://github.com/abo-abo/hydra
#+BEGIN_SRC emacs-lisp
(use-package hydra
  :defer t
  :custom
  (hydra-hint-display-type 'posframe)
  (hydra-posframe-show-params
   `( :internal-border-width 2
      :left-fringe 5
      :right-fringe 5
      :poshandler posframe-poshandler-frame-bottom-center)))
#+END_SRC

* Search & Navigation
** Recentf (Recent Files)
#+BEGIN_SRC emacs-lisp
(use-package recentf
  :straight (:type built-in)
  :custom
  (recentf-exclude `(,(straight--build-dir)
                     ,(locate-user-emacs-file "eln-cache/")
                     ,(expand-file-name "~/.virtualenvs")))
  (recentf-max-menu-items 25)
  (recentf-max-saved-items 200))
#+END_SRC

** Ace Jump
https://github.com/winterTTr/ace-jump-mode
#+BEGIN_SRC emacs-lisp
(use-package ace-jump-mode
  :bind ("C-c SPC" . ace-jump-mode))
#+END_SRC
** Ace Window
https://github.com/abo-abo/ace-window
#+BEGIN_SRC emacs-lisp
(use-package ace-window
  :bind ("C-x o" . ace-window))
#+END_SRC
* Text Editing
** Better Defaults
#+BEGIN_SRC emacs-lisp
(delete-selection-mode)
(electric-pair-mode)

(setq-default
 fill-column 80
 sentence-end-double-space nil
 indent-tabs-mode nil  ; Use spaces instead of tabs
 tab-width 4)
#+END_SRC

** Keybindings
#+BEGIN_SRC emacs-lisp
;; supercool multiline edit
(global-set-key (kbd "C->") 'mc/mark-next-like-this)
(global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
(global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)

#+END_SRC

** Undo Tree
https://gitlab.com/tsc25/undo-tree
#+BEGIN_SRC emacs-lisp
(use-package undo-tree
  :init
  ;; dont automatically save and restore undo-tree history along with buffer
  (setq undo-tree-auto-save-history nil)
  :custom
  (undo-tree-visualizer-diff t)
  :hook
  (dashboard-after-initialize . global-undo-tree-mode))
#+END_SRC

** Paren
Highlights the matching pair when the point is over parentheses.
#+BEGIN_SRC emacs-lisp
(use-package paren
  :straight (:type built-in)
  :custom
  (show-paren-when-point-inside-paren t)
  :custom-face
  (show-paren-match ((t (:background nil :weight bold :foreground "white"))))
  :hook
  (dashboard-after-initialize . show-paren-mode))
#+END_SRC

* Programming
** General
*** Electric Indent Mode
#+BEGIN_SRC emacs-lisp
(use-package electric
  :straight (:type built-in)
  :bind
  ( :map prog-mode-map
    ("M-RET" . electric-indent-just-newline))
  :hook
  (dashboard-after-initialize . electric-indent-mode))
#+END_SRC
*** Projectile
https://docs.projectile.mx/ Projectile is a project interaction library
#+BEGIN_SRC emacs-lisp
(use-package projectile
  :custom
  ;; setting them to nil, because windows has no tr command
  (projectile-git-submodule-command nil)
  (projectile-fossil-command nil)
  (projectile-pijul-command nil)
  (projectile-svn-command nil)
  (projectile-completion-system 'ivy)
  (projectile-indexing-method 'alien)
  (add-to-list 'projectile-globally-ignored-directories "^\\.venv$")
  (projectile-auto-discover nil)
  ;; Ignore emacs project (source codes)
  (projectile-ignored-projects '("~/emacs/"))
  (projectile-kill-buffers-filter 'kill-only-files)
  :bind (:map projectile-mode-map
              ("C-c p" . projectile-command-map))
  :hook
  (dashboard-after-initialize . projectile-mode))
#+END_SRC

*** YASnippet-snippets
https://github.com/AndreaCrotti/yasnippet-snippets
#+BEGIN_SRC emacs-lisp
(use-package yasnippet-snippets
  :after yasnippet)
#+END_SRC

*** Flycheck
https://www.flycheck.org/en/latest/

Run ~M-x flycheck-verify-setup~ to check the installation.

#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :diminish
  :commands flycheck-redefine-standard-error-levels
  :hook (after-init . global-flycheck-mode)
  :init (setq flycheck-global-modes
              '(not text-mode outline-mode fundamental-mode lisp-interaction-mode
                    org-mode diff-mode shell-mode eshell-mode term-mode vterm-mode)
              flycheck-emacs-lisp-load-path 'inherit
              flycheck-indication-mode (if (display-graphic-p)
                                           'right-fringe
                                         'right-margin)
              ;; Only check while saving and opening files
              flycheck-check-syntax-automatically '(save mode-enabled))
)
#+END_SRC

** Python
Install python packages with ~pip install -r requirements.txt~

#+BEGIN_SRC emacs-lisp
(use-package python
  :ensure nil
  :hook (inferior-python-mode . (lambda ()
                                  (process-query-on-exit-flag
                                   (get-process "python"))))
  :init
  ;; Disable readline based native completion
  (setq python-shell-completion-native-enable nil)
  :config
  ;; Default to Python
  ;; if you are using windows python3 will be the windows default non working python
  (setq python-shell-interpreter "python")
  (setq flycheck-python-pycompile-executable "python")
  (setq flycheck-python-flake8-executable "flake8")
  (setq flycheck-python-mypy-executable "mypy")
  ;; Env vars
  (with-eval-after-load 'exec-path-from-shell
    (exec-path-from-shell-copy-env "PYTHONPATH")))
#+END_SRC
** Debugger
Debug Adapter Protocol https://github.com/emacs-lsp/dap-mode
Dap for Python requires dap mode also need ~pip install debugpy~
#+BEGIN_SRC emacs-lisp
(use-package dap-mode
  :init
  (add-hook 'dap-stopped-hook
          (lambda (arg) (call-interactively #'dap-hydra)))
  :custom
  (lsp-enable-dap-auto-configure nil)
  :hook
  (python-mode . (lambda () (require 'dap-python)))
  :config
  (dap-ui-mode 1)
  ;; we use hydra, these dont work anyway
  (dap-ui-controls-mode -1)
  :commands dap-debug)
#+END_SRC
* Tools
** Dired
In split copy command copies files automatically to other window
#+BEGIN_SRC emacs-lisp
(use-package dired
  :straight (:type built-in)
  :commands (dired dired-jump)
  :bind (("C-x C-j" . dired-jump))
  :custom
  ;; ls parameters:
  ;; -l     use a long listing format
  ;; -A, --almost-all
  ;;        do not list implied . and ..
  ;; -h, --human-readable
  ;;        with -l and -s, print sizes like 1K 234M 2G etc.
  ;; -p, --indicator-style=slash
  ;;        append / indicator to directories
  (dired-listing-switches "-lAhp --group-directories-first")
  (setq dired-dwim-target t)
  :config
  ;; Dired in single buffer (prevent dired from opening a lot of buffers)
  (put 'dired-find-alternate-file 'disabled nil)
  (defhydra hydra-dired (:hint nil :color pink)
    "
^Mark^                   ^Actions^         ^Control^                 ^Movement^       ^Search^
^^^^^^^------------------------------------------------------------------------------------------------
_m_: mark                _+_: create dir   _(_: hide details         _p_: up dir      _S_: search files
_u_: unmark              _R_: rename       _g_: Refresh buffer       _n_: down dir    _I_: search content
_U_: unmark all          _C_: copy         _s_: toggle sort by date  _i_: view subdir ^ ^
_t_: toggle marks        _M_: chmod        _$_: summary              _$_: hide subdir ^ ^
_t_: mark using regexp   _Z_: compress     _<_: undo                 ^ ^              ^ ^
_/_: mark all dirs       _D_: delete       _v_: view                 ^ ^              ^ ^
^ ^                      _=_: diff         ^ ^                       ^ ^              ^ ^
"
    ("m" dired-mark)
    ("u" dired-unmark)
    ("U" dired-unmark-all-marks)
    ("t" dired-toggle-marks)
    ("E" dired-mark-files-regexp)
    ("/" dired-mark-directories)
    ("+" dired-create-directory)
    ("R" dired-do-rename)
    ("C" dired-do-copy)
    ("Z" dired-do-compress)
    ("D" dired-do-delete)
    ("M" dired-do-chmod)
    ("=" dired-diff)
    ("(" dired-hide-details-mode)
    ("g" revert-buffer)
    ("s" dired-sort-toggle-or-edit)
    ("?" dired-summary)
    ("<" dired-undo)
    ("v" dired-view-file)
    ("p" dired-tree-up)
    ("n" dired-tree-down)
    ("i" dired-maybe-insert-subdir)
    ("$" dired-hide-subdir)
    ("S" dired-isearch-filenames)
    ("I" dired-do-isearch)
    ("q" quit-window "quit" :color blue)
    ("." nil "toggle hydra" :color blue))
  (define-key dired-mode-map "." 'hydra-dired/body))
#+END_SRC
*** Dired Icons
Adds icons to dired mode
https://github.com/jtbm37/all-the-icons-dired
#+BEGIN_SRC emacs-lisp
(use-package all-the-icons-dired
  :hook (dired-mode . all-the-icons-dired-mode))
#+END_SRC
** IBuffer
Add hydra to ibuffer
https://github.com/abo-abo/hydra/wiki/Ibuffer
#+BEGIN_SRC emacs-lisp
(use-package ibuffer
  :straight (:type built-in)
  :bind (("C-x C-b" . 'ibuffer))
  :config
  (defhydra hydra-ibuffer-main (:color pink :hint nil)
    "
 ^Navigation^ | ^Mark^        | ^Actions^        | ^View^
-^----------^-+-^----^--------+-^-------^--------+-^----^-------
  _k_:    ↑   | _m_: mark     | _D_: delete      | _g_: refresh
 _RET_: visit | _u_: unmark   | _S_: save        | _s_: sort
  _j_:    ↓   | _*_: specific | _a_: all actions | _/_: filter
-^----------^-+-^----^--------+-^-------^--------+-^----^-------
"
    ("j" ibuffer-forward-line)
    ("RET" ibuffer-visit-buffer :color blue)
    ("k" ibuffer-backward-line)

    ("m" ibuffer-mark-forward)
    ("u" ibuffer-unmark-forward)
    ("*" hydra-ibuffer-mark/body :color blue)

    ("D" ibuffer-do-delete)
    ("S" ibuffer-do-save)
    ("a" hydra-ibuffer-action/body :color blue)

    ("g" ibuffer-update)
    ("s" hydra-ibuffer-sort/body :color blue)
    ("/" hydra-ibuffer-filter/body :color blue)

    ("o" ibuffer-visit-buffer-other-window "other window" :color blue)
    ("q" quit-window "quit ibuffer" :color blue)
    ("." nil "toggle hydra" :color blue))

  (defhydra hydra-ibuffer-mark (:color teal :columns 5
                                       :after-exit (hydra-ibuffer-main/body))
    "Mark"
    ("*" ibuffer-unmark-all "unmark all")
    ("M" ibuffer-mark-by-mode "mode")
    ("m" ibuffer-mark-modified-buffers "modified")
    ("u" ibuffer-mark-unsaved-buffers "unsaved")
    ("s" ibuffer-mark-special-buffers "special")
    ("r" ibuffer-mark-read-only-buffers "read-only")
    ("/" ibuffer-mark-dired-buffers "dired")
    ("e" ibuffer-mark-dissociated-buffers "dissociated")
    ("h" ibuffer-mark-help-buffers "help")
    ("z" ibuffer-mark-compressed-file-buffers "compressed")
    ("b" hydra-ibuffer-main/body "back" :color blue))

  (defhydra hydra-ibuffer-action (:color teal :columns 4
                                         :after-exit
                                         (if (eq major-mode 'ibuffer-mode)
                                             (hydra-ibuffer-main/body)))
    "Action"
    ("A" ibuffer-do-view "view")
    ("E" ibuffer-do-eval "eval")
    ("F" ibuffer-do-shell-command-file "shell-command-file")
    ("I" ibuffer-do-query-replace-regexp "query-replace-regexp")
    ("H" ibuffer-do-view-other-frame "view-other-frame")
    ("N" ibuffer-do-shell-command-pipe-replace "shell-cmd-pipe-replace")
    ("M" ibuffer-do-toggle-modified "toggle-modified")
    ("O" ibuffer-do-occur "occur")
    ("P" ibuffer-do-print "print")
    ("Q" ibuffer-do-query-replace "query-replace")
    ("R" ibuffer-do-rename-uniquely "rename-uniquely")
    ("T" ibuffer-do-toggle-read-only "toggle-read-only")
    ("U" ibuffer-do-replace-regexp "replace-regexp")
    ("V" ibuffer-do-revert "revert")
    ("W" ibuffer-do-view-and-eval "view-and-eval")
    ("X" ibuffer-do-shell-command-pipe "shell-command-pipe")
    ("b" nil "back"))

  (defhydra hydra-ibuffer-sort (:color amaranth :columns 3)
    "Sort"
    ("i" ibuffer-invert-sorting "invert")
    ("a" ibuffer-do-sort-by-alphabetic "alphabetic")
    ("v" ibuffer-do-sort-by-recency "recently used")
    ("s" ibuffer-do-sort-by-size "size")
    ("f" ibuffer-do-sort-by-filename/process "filename")
    ("m" ibuffer-do-sort-by-major-mode "mode")
    ("b" hydra-ibuffer-main/body "back" :color blue))

  (defhydra hydra-ibuffer-filter (:color amaranth :columns 4)
    "Filter"
    ("m" ibuffer-filter-by-used-mode "mode")
    ("M" ibuffer-filter-by-derived-mode "derived mode")
    ("n" ibuffer-filter-by-name "name")
    ("c" ibuffer-filter-by-content "content")
    ("e" ibuffer-filter-by-predicate "predicate")
    ("f" ibuffer-filter-by-filename "filename")
    (">" ibuffer-filter-by-size-gt "size")
    ("<" ibuffer-filter-by-size-lt "size")
    ("/" ibuffer-filter-disable "disable")
    ("b" hydra-ibuffer-main/body "back" :color blue))
  (define-key ibuffer-mode-map "." 'hydra-ibuffer-main/body))
#+END_SRC
** Version Control
*** Magit
#+BEGIN_SRC emacs-lisp
(use-package magit
  :commands magit-status)
#+END_SRC
** Org
** EShell
Default emacs shell with some updated styling.
Mostly taken from https://gist.github.com/jav-solo/d8a0805c04a5fcb90e1fdbc7ba8fbaa2
#+BEGIN_SRC emacs-lisp
(use-package eshell
  :straight (:type built-in)
  :commands eshell
  :defines eshell-prompt-function
  :config
  ;; Use 'prepend for the NS and Mac ports or Emacs will crash.
  (set-fontset-font t 'unicode (font-spec :family "all-the-icons") nil 'prepend)

  (defmacro with-face (STR &rest PROPS)
    "Return STR propertized with PROPS."
    `(propertize ,STR 'face (list ,@PROPS)))

  (defmacro esh-section (NAME ICON FORM &rest PROPS)
    "Build eshell section NAME with ICON prepended to evaled FORM with PROPS."
    `(setq ,NAME
           (lambda () (when ,FORM
                        (-> ,ICON
                            (concat esh-section-delim ,FORM)
                            (with-face ,@PROPS))))))

  (defun esh-acc (acc x)
    "Accumulator for evaluating and concatenating esh-sections."
    (--if-let (funcall x)
              (if (s-blank? acc)
                  it
                (concat acc esh-sep it))
              acc))

  (defun esh-prompt-func ()
    "Build `eshell-prompt-function'"
    (concat esh-header
            (-reduce-from 'esh-acc "" eshell-funcs)
            "\n"
            eshell-prompt-string))

  (esh-section esh-git
               (all-the-icons-alltheicon "git")
               (vc-git--run-command-string nil "branch" "--show-current")
               '(:foreground "pink"))

  (esh-section esh-dir
               nil
               (abbreviate-file-name (eshell/pwd))
               '(:foreground "gold"))

  (esh-section esh-clock
               (all-the-icons-alltheicon "terminal")
               (format-time-string "%H:%M" (current-time))
               '(:foreground "forest green"))

  ;; Separator between esh-sections
  (setq esh-sep " | ")

  ;; Separator between an esh-section icon and form
  (setq esh-section-delim " ")

  ;; Eshell prompt header
  (setq esh-header "\n┌─")

  ;; Eshell prompt regexp and string. Unless you are varying the prompt by eg.
  ;; your login, these can be the same.
  (setq eshell-prompt-regexp "└─>")
  (setq eshell-prompt-string "└─>")

  ;; Choose which eshell-funcs to enable
  (setq eshell-funcs (list esh-dir esh-clock esh-git))

  ;; Enable the new eshell prompt
  (setq eshell-prompt-function 'esh-prompt-func))
#+END_SRC
*** Syntax highlighting
https://github.com/akreisher/eshell-syntax-highlighting

#+BEGIN_SRC
;; minor syntax highlighting for eshell
(use-package eshell-syntax-highlighting
  :after eshell-mode
  :config
  ;; Enable in all Eshell buffers.
  (eshell-syntax-highlighting-global-mode +1))
#+END_SRC
* Potential new packages
The following packages may be interesting
